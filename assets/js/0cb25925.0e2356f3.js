"use strict";(self.webpackChunkag_tech_mentoring=self.webpackChunkag_tech_mentoring||[]).push([[1008],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=m(n),u=o,h=p["".concat(l,".").concat(u)]||p[u]||c[u]||a;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var m=2;m<a;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},55011:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:2},i=void 0,s={unversionedId:"foundational-program/command-line/Basics",id:"foundational-program/command-line/Basics",title:"Basics",description:"Stdin vs Stdout vs Stderr",source:"@site/docs/foundational-program/1-command-line/1. Basics.md",sourceDirName:"foundational-program/1-command-line",slug:"/foundational-program/command-line/Basics",permalink:"/ag-tech-mentorship-website/docs/foundational-program/command-line/Basics",draft:!1,editUrl:"https://github.com/AleksandrGontcharov/ag-tech-mentorship/blob/master/docs/foundational-program/1-command-line/1. Basics.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/ag-tech-mentorship-website/docs/foundational-program/command-line/Introduction"},next:{title:"Common Commands",permalink:"/ag-tech-mentorship-website/docs/foundational-program/command-line/Common Commands"}},l={},m=[{value:"Stdin vs Stdout vs Stderr",id:"stdin-vs-stdout-vs-stderr",level:2},{value:"Stream redirection",id:"stream-redirection",level:2},{value:"Exit codes",id:"exit-codes",level:2}],d={toc:m},p="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"stdin-vs-stdout-vs-stderr"},"Stdin vs Stdout vs Stderr"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"stdin (standard input)"),": This is when a program asks you to type something in. For example, a game might ask you to type in your name before you start playing. When you type your name, you're providing input through stdin."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"stdout (standard output)"),': This is when a program shows you information. Let\'s say you\'re using a program to do some math homework. You type in a math problem, like "2 + 2", and the program shows you the answer, "4". The program is using stdout to show you the answer.'),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"stderr (standard error)"),': This is when a program tells you about a problem. Suppose you\'re using the same math program and you type in something that doesn\'t make sense, like "2 + apple". The program can\'t do that math problem, so it shows you an error message like "Invalid input: apple". That error message is being sent through stderr.')),(0,o.kt)("h2",{id:"stream-redirection"},"Stream redirection"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Redirecting stdout"),": You're using a program that's creating a lot of output, and you want to save it to look at later. You can redirect the stdout to a file. Then, instead of showing up on your screen, all of the output gets saved into the file.")),(0,o.kt)("p",null,"Here's a simple command in the command-line interface (like Terminal on a Mac or Command Prompt on Windows) that shows redirection of stdout:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'echo "Hello, world!" > hello.txt\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},'echo "Hello, world!"'),' part is a command that creates some output ("Hello, world!"). Normally, this output would just be shown on your screen. But the ',(0,o.kt)("inlineCode",{parentName:"p"},"> hello.txt"),' part redirects the output to a file named "hello.txt". So instead of seeing "Hello, world!" on your screen, it gets saved in the file.'),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Redirecting stderr"),": Suppose a program might create errors, and you want to keep track of them. You can redirect stderr to a file. Then, instead of showing up on your screen, all of the error messages get saved into the file.")),(0,o.kt)("p",null,"Here's a simple command-line command that shows redirection of stderr:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'find / -name "file.txt" 2> errors.txt`\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},'find / -name "file.txt"'),' part is a command that searches for a file named "file.txt". If it encounters any errors (like directories it doesn\'t have permission to search), it will send an error message to stderr. The ',(0,o.kt)("inlineCode",{parentName:"p"},"2> errors.txt"),' part redirects stderr to a file named "errors.txt". So instead of seeing the error messages on your screen, they get saved in the file.'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Redirecting stdin"),": Suppose you have a program that needs to get a lot of input, and typing it all in would take a long time. You can redirect stdin from a file. Then, instead of typing in all the input, the program gets the input from the file.")),(0,o.kt)("p",null,"Here's a simple command-line command that shows redirection of stdin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sort < words.txt\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sort")," part is a command that sorts input alphabetically. Normally, you'd have to type in all the words you want to sort. But the ",(0,o.kt)("inlineCode",{parentName:"p"},"< words.txt"),' part redirects stdin from a file named "words.txt". So instead of typing in all the words, the program gets the words from the file, and then sorts them.'),(0,o.kt)("h2",{id:"exit-codes"},"Exit codes"),(0,o.kt)("p",null,"n Linux, an\xa0",(0,o.kt)("strong",{parentName:"p"},"exit code"),"\xa0indicates the response from the command or a script after execution. It ranges from 0 to 255. The exit codes help us determine whether a process ran:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Successfully."),(0,o.kt)("li",{parentName:"ol"},"Failed due to an error."),(0,o.kt)("li",{parentName:"ol"},"Or another state that gives us an indication of an unexpected result.")),(0,o.kt)("p",null,"Here's an example:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Run a command that works:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'echo "Hello, world!" \necho $?\n')),(0,o.kt)("p",null,'The first command prints "Hello, world!" and the second command prints the exit code of the first command. It will print ',(0,o.kt)("inlineCode",{parentName:"p"},"0"),", which means the first command was successful."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Run a command that doesn't exist:   ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nonexistentcommand\necho $?\n")),(0,o.kt)("p",null,"The first command tries to run a command that doesn't exist, and the second command prints the exit code of the first command. It will print a non-zero number (usually ",(0,o.kt)("inlineCode",{parentName:"p"},"127"),"), which means the first command failed."),(0,o.kt)("p",null,"I hope this helps you understand exit codes better!"))}c.isMDXComponent=!0}}]);
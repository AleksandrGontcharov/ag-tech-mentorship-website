"use strict";(self.webpackChunkag_tech_mentoring=self.webpackChunkag_tech_mentoring||[]).push([[6160],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=i,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:4},a=void 0,s={unversionedId:"foundational-program/command-line/Scripting",id:"foundational-program/command-line/Scripting",title:"Scripting",description:"Basics of Scripting",source:"@site/docs/foundational-program/1-command-line/5. Scripting.md",sourceDirName:"foundational-program/1-command-line",slug:"/foundational-program/command-line/Scripting",permalink:"/ag-tech-mentorship-website/docs/foundational-program/command-line/Scripting",draft:!1,editUrl:"https://github.com/AleksandrGontcharov/ag-tech-mentorship/blob/master/docs/foundational-program/1-command-line/5. Scripting.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Permissions",permalink:"/ag-tech-mentorship-website/docs/foundational-program/command-line/Permissions"},next:{title:"\ue70c VSCode",permalink:"/ag-tech-mentorship-website/docs/category/-vscode"}},l={},p=[{value:"Basics of Scripting",id:"basics-of-scripting",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"basics-of-scripting"},"Basics of Scripting"),(0,i.kt)("p",null,"Bash scripts are a powerful tool for automating tasks on Linux. They're scripts written in the Bash scripting language, which is the language that the Bash shell (the most common shell on Linux) uses."),(0,i.kt)("p",null,"Here's a step-by-step guide to creating your first Bash script:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 1: Create a New Script File")),(0,i.kt)("p",null,"First, use a text editor to create a new file. This file will contain your script. You might create a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"myscript.sh"),", like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"touch myscript.sh\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},".sh")," extension is commonly used for shell scripts, but it's not required."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 2: Add the Shebang Line")),(0,i.kt)("p",null,"The first line of your script should be a shebang (",(0,i.kt)("inlineCode",{parentName:"p"},"#!"),"). This line tells the system what interpreter to use to execute the script. For a Bash script, this line should be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#!/bin/bash\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 3: Write Your Script")),(0,i.kt)("p",null,'Next, write the commands that you want your script to run. For example, you might write a script that prints "Hello, World!" to the terminal:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\necho "Hello, World!"\n')),(0,i.kt)("p",null,"You can write any Bash commands in your script. They'll be run in order, from top to bottom."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 4: Make Your Script Executable")),(0,i.kt)("p",null,"By default, your script won't be executable, which means you can't run it. To make it executable, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"chmod")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x myscript.sh\n")),(0,i.kt)("p",null,"This command gives the user permission to execute the script."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 5: Run Your Script")),(0,i.kt)("p",null,"Finally, you can run your script! To run it, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"./")," prefix, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./myscript.sh\n")),(0,i.kt)("p",null,"This command tells the system to run the script located at ",(0,i.kt)("inlineCode",{parentName:"p"},"./myscript.sh"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"./"),' prefix means "in the current directory".'),(0,i.kt)("p",null,"That's it! You've written your first Bash script!"),(0,i.kt)("p",null,"Of course, Bash scripting can get much more complex than this. You can use variables, control flow (like ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," statements and ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loops), and much more. But this guide should give you a good start."),(0,i.kt)("p",null,"Here's an example of a slightly more complex script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# This script prints the first 10 numbers.\n\nfor i in {1..10}\ndo\n   echo "Number: $i"\ndone\n')),(0,i.kt)("p",null,"In this script, the ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loop goes through each number from 1 to 10, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"echo")," command inside the loop prints out the current number. The ",(0,i.kt)("inlineCode",{parentName:"p"},"$i")," inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"echo")," command is a variable that holds the current number."))}m.isMDXComponent=!0}}]);